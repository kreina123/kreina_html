import pandas as pd
import random

# Generate sample data for 100 rows
product_types = [f'Type {chr(65 + i)}' for i in range(26)]  # Generate Type A to Type Z
product_types *= 4  # Repeat to get 100 rows (4 * 26 = 104, we'll trim to 100)

data = {
    'Product Type': product_types[:100],  # Trim to exactly 100 entries
    'Column2': [f'Data {i}' for i in range(1, 101)],
    'Column3': [f'Data {i+100}' for i in range(1, 101)],
    'Column4': [f'Data {i+200}' for i in range(1, 101)],
    'Column5': [f'Data {i+300}' for i in range(1, 101)],
    'Column6': [f'Data {i+400}' for i in range(1, 101)],
    'Column7': [f'Data {i+500}' for i in range(1, 101)],
    'Column8': [f'Data {i+600}' for i in range(1, 101)],
    'Column9': [f'Data {i+700}' for i in range(1, 101)],
    'Column10': [f'Data {i+800}' for i in range(1, 101)],
}

# Create a DataFrame for main data
df = pd.DataFrame(data)

# Generate nested data with 100 rows (example)
nested_data = {
    'Nested Column1': [f'Nested Data {i}' for i in range(1, 101)],
    'Nested Column2': [f'More Data {i}' for i in range(1, 101)],
    'Nested Column3': [f'More Data {i+100}' for i in range(1, 101)],
    'Nested Column4': [f'More Data {i+200}' for i in range(1, 101)],
    'Nested Column5': [f'More Data {i+300}' for i in range(1, 101)],
    'Nested Column6': [f'More Data {i+400}' for i in range(1, 101)],
    'Nested Column7': [f'More Data {i+500}' for i in range(1, 101)],
    'Nested Column8': [f'More Data {i+600}' for i in range(1, 101)],
    'Nested Column9': [f'More Data {i+700}' for i in range(1, 101)],
    'Nested Column10': [f'More Data {i+800}' for i in range(1, 101)],
}

nested_df = pd.DataFrame(nested_data)

# Apply some styling to the main DataFrame
styled_df = df.style.set_table_styles(
    [{'selector': 'thead th', 'props': [('background-color', '#f4f4f4'), ('font-weight', 'bold'), ('padding', '10px'), ('text-align', 'left')]},
     {'selector': 'tbody tr:nth-child(even)', 'props': [('background-color', '#f9f9f9')]},
     {'selector': 'tbody tr:hover', 'props': [('background-color', '#f1f1f1')]},
     {'selector': 'td', 'props': [('padding', '8px'), ('text-align', 'left'), ('border', '1px solid #ddd')]},
     {'selector': '.expand-btn', 'props': [('background-color', '#007bff'), ('color', 'white'), ('border', 'none'),
                                           ('padding', '5px 10px'), ('cursor', 'pointer'), ('font-size', '14px'),
                                           ('border-radius', '4px')]},
     {'selector': '.expand-btn:hover', 'props': [('background-color', '#0056b3')]},
     {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},
     {'selector': 'tbody', 'props': [('border-top', '1px solid #ddd')]},
     {'selector': '.nested-row', 'props': [('background-color', '#f9f9f9')]}  # Removed italic style here
])

# Extract the rendered HTML and CSS from the Styler
styled_html = styled_df.render()

# Extract the CSS styles from the HTML (embedded in <style> tag)
css_start = styled_html.find('<style type="text/css">')
css_end = styled_html.find('</style>') + len('</style>')
css_styles = styled_html[css_start:css_end]

# Convert the main DataFrame to HTML (without the styles) and add the expand functionality
def create_html_table(df, nested_df, css_styles):
    rows = []
    for i, row in df.iterrows():
        # Create a row for the main DataFrame with the "+" button in the "Product Type" column
        rows.append(f'<tr class="main-row"><td><button class="expand-btn" id="expand-btn-{i}" onclick="toggleRow({i})">+</button> {row["Product Type"]}</td>')

        # Add all columns to the main table row
        for col in df.columns[1:]:
            rows.append(f'<td>{row[col]}</td>')
        rows.append('</tr>')
        
        # Create a row for the nested DataFrame (initially hidden)
        nested_rows = ''
        for j, nested_row in nested_df.iterrows():
            nested_rows += f'<tr class="nested-row nested-row-{i}" style="display:none;">'
            # Add all nested columns
            for nested_col in nested_df.columns:
                nested_rows += f'<td>{nested_row[nested_col]}</td>'
            nested_rows += '</tr>'
        
        rows.append(nested_rows)
    
    # HTML Table with a button to expand each row
    table_html = f'''
    {css_styles}  <!-- Inject the extracted CSS styles from the pandas Styler -->
    <style>
        table {{
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }}
        th, td {{
            padding: 8px;
            border: 1px solid #ddd;
            text-align: left;
        }}
        thead th {{
            background-color: #f4f4f4;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 1;  /* Ensures headers stay on top */
            word-wrap: break-word;  /* Ensures long header text wraps */
            white-space: normal;  /* Allows wrapping */
            text-align: center;  /* Align header text in the center */
        }}
        tbody tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tbody tr:hover {{
            background-color: #f1f1f1;
        }}
        .expand-btn {{
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 14px;
            border-radius: 4px;
        }}
        .expand-btn:hover {{
            background-color: #0056b3;
        }}
        .nested-row {{
            background-color: #f9f9f9;
        }}
    </style>
    <table>
        <thead>
            <tr>
                <th>Product Type</th>
                <th>Column2</th>
                <th>Column3</th>
                <th>Column4</th>
                <th>Column5</th>
                <th>Column6</th>
                <th>Column7</th>
                <th>Column8</th>
                <th>Column9</th>
                <th>Column10</th>
            </tr>
        </thead>
        <tbody>
            {''.join(rows)}
        </tbody>
    </table>
    <script>
        function toggleRow(rowIndex) {{
            var rows = document.querySelectorAll('.nested-row-' + rowIndex);
            var button = document.getElementById('expand-btn-' + rowIndex);

            rows.forEach(function(row) {{
                row.style.display = (row.style.display === 'none') ? '' : 'none';
            }});

            // Toggle the button text between "+" and "-"
            if (rows[0].style.display === 'none') {{
                button.innerHTML = '+';
            }} else {{
                button.innerHTML = '-';
            }}
        }}
    </script>
    '''

    return table_html

# Generate the HTML with styles and expand functionality
html_content = create_html_table(df, nested_df, css_styles)

# Save the HTML to a file
with open('table_with_toggle_plus_minus_100_rows.html', 'w') as f:
    f.write(html_content)

import pandas as pd

# Sample DataFrame with both numeric and text columns
df = pd.DataFrame({
    'A': [1.1234, 2.5678, 3.9123],
    'B': [4.1234, 5.5678, 6.9123],
    'Text': ['apple', 'banana', 'cherry']
})

# Round numeric columns to 2 decimal places
df_rounded = df.apply(lambda x: x.round(2) if x.dtype in ['float64', 'int64'] else x)

# Display the rounded DataFrame as HTML
df_rounded.to_html(classes="table table-striped", escape=False)
