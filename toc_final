import re

# overflow styling
# width: 200px
# white-space: normal
# overflow-wrap: break-word

# Input HTML with headers including tab_header_id attributes
html = '''
<div class="tab-pane fade" id="tab2" role="tabpanel">
    <h2 tab_header_id="Test">Header A</h2>
    <h3>Subheader A1.1</h3>
    <h3>Subheader A1.2</h3>
    <h4>Sub-subheader A</h4>
    <h4>Sub-subheader A</h4>
    <div class="chart" id="chart4">[Chart 4]</div>
    <h2>Header B</h2>
    <h3>Subheader B</h3>
    <h4>Sub-subheader B</h4>
    <div class="chart" id="chart5">[Chart 5]</div>
    <h2>Header C</h2>
    <h3>Subheader C</h3>
    <h4>Sub-subheader C</h3>
    <div class="chart" id="chart6">[Chart 6]</div>
</div>
'''

# Generate unique IDs for headers in the HTML content and apply numbering to the headers
def assign_ids_and_numbers_to_headers(html):
    numbering = {}
    header_info = []  # List to store header information

    def add_id_and_number(match):
        header_tag = match.group(1)  # Get the header tag (e.g., h2, h3, etc.)
        header_text = match.group(3)  # Get the header text
        existing_attrs = match.group(2)  # Get existing attributes

        level = int(header_tag[1:])   # Extract the numeric level (e.g., 2 for h2, 3 for h3)
        
        # Update numbering for the current level
        if level not in numbering:
            numbering[level] = 0
        # Reset lower-level numbering
        for l in list(numbering.keys()):
            if l > level:
                del numbering[l]
        
        numbering[level] += 1  # Increment current level number

        # Create the numbering string
        number_str = '.'.join(str(numbering[l]) for l in sorted(numbering) if l <= level)
        
        # Add number to the header text
        numbered_header_text = f"{number_str} {header_text}"
        
        # Generate header ID by including the numbering
        header_id = f"{number_str}-{re.sub(r'[^a-zA-Z0-9]+', '-', header_text.strip().lower())}"

        # Check for existing tab_header_id in the existing attributes
        existing_tab_header_id_match = re.search(r'tab_header_id=[\'"]([^\'"]+)[\'"]', existing_attrs)
        tab_header_id = existing_tab_header_id_match.group(1) if existing_tab_header_id_match else ''  # Use existing tab_header_id or empty string

        # Store header information
        header_info.append({
            'tab_header_id': tab_header_id,  # Capture the tab_header_id or empty string
            'headerId': header_id,
            'title': numbered_header_text
        })

        # Return the modified header with the new id and tab_header_id
        return f"<{header_tag} id='{header_id}' tab_header_id='{tab_header_id}'>{numbered_header_text}</{header_tag}>"

    # Apply the function to all headers in the HTML content
    updated_html = re.sub(r'<(h\d+)([^>]*)>(.*?)<\/\1>', add_id_and_number, html)
    
    return updated_html, header_info

# Apply numbering and IDs to the headers in the HTML content
html_content_with_ids_and_numbers, headers_info = assign_ids_and_numbers_to_headers(html)

# Output the resulting HTML content
print("Updated HTML Content with IDs and Numbers:\n", html_content_with_ids_and_numbers)
print("\nHeader Information:\n", headers_info)  # Displaying the header information with tab_header_id

display(HTML("""
<style>
.output_area {
    zoom: 1.15; /* Scaling factor (1.25 is 125% zoom) */
}
</style>
"""))

data = [{"Product Type": ["a", "b", "c"]}, "AIR Inputs::Filters"]

# Convert to flat string
flat_string = ', '.join(
    [f"{key}: {', '.join(value)}" if isinstance(value, list) else value for item in data for key, value in item.items()] if isinstance(item, dict) else [item]
)

print(flat_string)

# Always apply these styles
styles = [
    # Add a less bold line below the header
    {'selector': 'thead th', 'props': [
        ('border-bottom', '1px solid black')  # Less bold line below header
    ]},
    # Styles for odd rows
    {'selector': 'tr:nth-child(odd)', 'props': [
        ('background-color', '#f2f2f2'),     # Grey background for odd rows
        ('border', 'none'),                  # No border for rows
    ]},
    # Styles for even rows
    {'selector': 'tr:nth-child(even)', 'props': [
        ('background-color', 'white'),       # White background for even rows
        ('border', 'none'),                  # No border for rows
    ]},
    # Styles for hover effect
    {'selector': 'tr:hover', 'props': [
        ('background-color', '#d9d9d9'),     # Darker grey on hover
        ('border', 'none'),                  # No border for rows
    ]},
    # Styles for all cells
    {'selector': 'td', 'props': [
        ('padding', '8px'),                  # More space for rows
        ('font-size', '14px'),               # Set font size (same as header)
        ('border', 'none'),                  # No border for cells
        ('text-align', 'left'),              # Align text to the left
    ]}
]

# Conditionally add the header style if test_bool is True
if test_bool:
    styles.insert(0, {
        'selector': 'th', 'props': [
            ('background-color', 'white'),       # Match table body background
            ('font-weight', 'bold'),             # Bold text for header
            ('border', 'none'),                  # No border for headers
            ('padding', '4px'),                  # Less row height
            ('font-size', '12px'),               # Set font size
            ('text-align', 'left'),              # Align text to the left
        ]
    })

# Apply styles to the DataFrame
styled_df = (
    df.style
    .set_table_styles(styles)
    .set_table_attributes('style="border-collapse: collapse; width: auto;"')  # Autofit column width
    .hide_index()
)
