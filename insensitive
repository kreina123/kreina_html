class CaseInsensitiveDict(dict):
    def __setitem__(self, key, value):
        super().__setitem__(key.title(), value)

    def __getitem__(self, key):
        return super().__getitem__(key.title())

    def __delitem__(self, key):
        super().__delitem__(key.title())

    def __contains__(self, key):
        return super().__contains__(key.title())

    def get(self, key, default=None):
        return super().get(key.title(), default)

    def setdefault(self, key, default=None):
        return super().setdefault(key.title(), default)

    def update(self, *args, **kwargs):
        for key, value in dict(*args, **kwargs).items():
            self[key] = value

# Example usage:
ci_dict = CaseInsensitiveDict()
ci_dict["someKey"] = "value"
print(ci_dict["SomeKey"])  # Output: value
print(ci_dict["SOMEKEY"])  # Output: value

ci_dict["AnotherKey"] = 123
print("anotherkey" in ci_dict)  # Output: True
print(ci_dict.get("anotherKey"))  # Output: 123
